#!/bin/bash

# Script: fcarchiver
# Description: Automates the creation of a Final Cut Pro archive by processing media files in a directory, generating the required plist file (FCArchMetadata.plist), and adjusting file creation dates.

# Function to display help
show_help() {
    cat <<EOF
Usage: fcarchiver [OPTIONS] <directory>

Converts a specified directory into a Final Cut Pro archive by generating a plist file (FCArchMetadata.plist) and adjusting the creation dates of media files based on their filenames or metadata.

Options:
  --help        Show this help message and exit
  --notouching  Disable date extraction and modification of creation dates

Dependencies:
  - uuidgen: To generate unique identifiers for files and the directory.
  - mediainfo: To extract creation dates from media files (optional, if --notouching is not used).

Examples:
  fcarchiver /path/to/media
  fcarchiver --notouching /path/to/media
  fcarchiver --help

Description:
  fcarchiver automates the archival process for Final Cut Pro by:
    1. Scanning the specified directory for media files (e.g., .mov, .mp4, .jpeg).
    2. Extracting creation dates from filenames or using mediainfo if the date is not in the filename.
    3. Generating a plist file with metadata required by Final Cut Pro.
    4. Setting the creation dates of files and renaming the directory to include the .fcarch extension.
    5. If the --notouching option is specified, date extraction and creation date modification are skipped.

Notes:
  - Ensure that the uuidgen and mediainfo tools are installed on your system (unless --notouching is used).
  - If the plist file (FCArchMetadata.plist) already exists in the directory, you will be prompted to overwrite it.

EOF
}

# Function to extract date from filename
extract_date_from_filename() {
    local filename="$1"
    echo "$filename" | grep -oE '[0-9]{4}[._ -]?[0-9]{2}[._ -]?[0-9]{2}[._ -]?[0-9]{2}[._ -]?[0-9]{2}[._ -]?[0-9]{2}' | sed 's/[._ -]\+/_/g'
}

# Function to get creation date using mediainfo
get_creation_date_with_mediainfo() {
    local file="$1"
    local date=$(mediainfo --Output='General;%File_Modified_Date%' "$file" | sed 's/:/_/g' | sed 's/\+0000//')
    if [[ -z "$date" ]]; then
        echo "1970-01-01_00_00_00"
    else
        echo "$date"
    fi
}

# Function to convert date to touch format
date_to_touch_format() {
    local date_str="$1"
    local formatted_date=$(echo "$date_str" | sed -E 's/[-_]/ /g')  # Replace - and _ with spaces
    local timestamp=$(date -j -f "%Y %m %d %H %M %S" "$formatted_date" "+%Y%m%d%H%M.%S" 2>/dev/null)
    if [[ $? -ne 0 ]]; then
        echo "Invalid date format: $date_str"
        exit 1
    fi
    echo "$timestamp"
}

# Variables
NOTOUCHING=false

# Parse options
while [[ "$1" == --* ]]; do
    case "$1" in
        --help)
            show_help
            exit 0
            ;;
        --notouching)
            NOTOUCHING=true
            shift
            ;;
        *)
            echo "Unknown option: $1"
            show_help
            exit 1
            ;;
    esac
done

# Check if a directory is passed as parameter
if [ -z "$1" ]; then
    echo "Error: No directory specified."
    show_help
    exit 1
fi

DIR="$1"

# Check if the directory exists
if [ ! -d "$DIR" ]; then
    echo "Error: The specified directory does not exist."
    exit 1
fi

# Get the absolute path of the directory
DIR=$(realpath "$DIR")

# Define the output plist file path
plist_file="$DIR/FCArchMetadata.plist"

# Check if the plist file already exists and ask for confirmation to overwrite
if [ -f "$plist_file" ]; then
    read -p "The file $plist_file already exists. Do you want to overwrite it? (y/n): " confirm
    if [[ "$confirm" != "y" ]]; then
        echo "Operation cancelled. File not overwritten."
        exit 0
    fi
fi

# Ask the user to specify the device name
read -p "Please specify the device name (e.g., camera model): " device_name

# Generate UUID for the entire directory
directory_uuid=$(uuidgen)
echo "Directory UUID: $directory_uuid"

# Define supported media file extensions
media_extensions=("mov" "mp4" "avi" "m4v" "mxf" "mts" "m2t" "wav" "mp3" "aac" "m4a" "aiff" "aif" "jpeg" "jpg" "png" "tiff" "bmp" "gif" "tif")

# Arrays to store file info
file_paths=()
file_dates=()
file_clip_ids=()

# Process files
while IFS= read -r -d '' file; do
    extension="${file##*.}"
    extension=$(echo "$extension" | tr '[:upper:]' '[:lower:]')

    # Check if the file extension is supported
    if [[ " ${media_extensions[*]} " == *" $extension "* ]]; then
        base_name=$(basename "$file")
        
        # Extract date from filename or use mediainfo
        if [ "$NOTOUCHING" = false ]; then
            date_from_name=$(extract_date_from_filename "$base_name")
            if [[ -z "$date_from_name" ]]; then
                file_date=$(get_creation_date_with_mediainfo "$file")
            else
                file_date="$date_from_name"
            fi
            file_dates+=("$file_date")
        fi
        
        # Store info with original file path and date
        file_paths+=("$file")
        file_clip_ids+=("$(uuidgen)")
        
        echo "Processed file: $base_name"
    fi
done < <(find "$DIR" -type f -print0)

if [ "$NOTOUCHING" = false ]; then
    # Determine the oldest date
    oldest_date=$(printf "%s\n" "${file_dates[@]}" | sort | head -n 1)
else
    oldest_date=$(date "+%Y-%m-%d_%H_%M_%S")
fi

# Generate the plist file header
{
    echo "<?xml version=\"1.0\" encoding=\"UTF-8\"?>"
    echo "<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">"
    echo "<plist version=\"1.0\">"
    echo "<dict>"
    echo "  <key>UUID</key>"
    echo "  <string>${directory_uuid}</string>"
    echo "  <key>archiveDate</key>"
    echo "  <string>${oldest_date//_/ }</string>"
    echo "  <key>archiveVersion</key>"
    echo "  <real>1</real>"
    echo "  <key>clipIDs</key>"
    echo "  <array>"
} > "$plist_file"

# Write clip IDs to plist
for ((i = 0; i < ${#file_clip_ids[@]}; i++)); do
    {
        echo "    <dict>"
        echo "      <key>clipID</key>"
        echo "      <string>${file_clip_ids[$i]}</string>"
        echo "    </dict>"
    } >> "$plist_file"
done

# Close the plist
{
    echo "  </array>"
    echo "  <key>deviceName</key>"
    echo "  <string>${device_name}</string>"
    echo "  <key>isCapture</key>"
    echo "  <true/>"
    echo "</dict>"
    echo "</plist>"
} >> "$plist_file"

echo "Plist file created: $plist_file"

if [ "$NOTOUCHING" = false ]; then
    # Append .fcarch to the directory name if not already present
    new_dir="${DIR}.fcarch"

    if [[ "$DIR" != *.fcarch ]]; then
        mv "$DIR" "$new_dir" || { echo "Error: Unable to rename directory."; exit 1; }
        echo "Directory renamed to: $new_dir"
        
        # Set directory creation date to the oldest file date
        touch_format_date=$(date_to_touch_format "$oldest_date")
        touch -t "$touch_format_date" "$new_dir"
        
        # Hide the extension in Finder (macOS only)
        xattr -wx com.apple.FinderInfo "0000000000000000001000000000000000000000000000000000000000000000" "$new_dir"
    else
        echo "Directory already ends with .fcarch. No rename needed."
        
        # Set directory creation date to the oldest file date
        touch_format_date=$(date_to_touch_format "$oldest_date")
        touch -t "$touch_format_date" "$DIR"
        
        # Hide the extension in Finder (macOS only)
        xattr -wx com.apple.FinderInfo "0000000000000000001000000000000000000000000000000000000000000000" "$DIR"
    fi
else
    echo "Date extraction and modification skipped due to --notouching option."
fi